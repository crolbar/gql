package table

import (
	"strings"

	"github.com/charmbracelet/bubbles/help"
	"github.com/charmbracelet/bubbles/key"
	"github.com/charmbracelet/bubbles/viewport"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/mattn/go-runewidth"
)

type Cursor struct {
    x int
    y int
}

// Model defines a state for the table widget.
type Model struct {
	KeyMap KeyMap
	Help   help.Model

	cols   []Column
	rows   []Row
	cursor Cursor
	focus  bool
	styles Styles

	Viewport viewport.Model
	Start    int
	End      int
}

// Row represents one line in the table.
type Row []string

// Column defines the table structure.
type Column struct {
	Title string
	Width int
}

// KeyMap defines keybindings. It satisfies to the help.KeyMap interface, which
// is used to render the help menu.
type KeyMap struct {
	LineUp       key.Binding
	LineDown     key.Binding
	PageUp       key.Binding
	PageDown     key.Binding
	HalfPageUp   key.Binding
	HalfPageDown key.Binding
	GotoTop      key.Binding
	GotoBottom   key.Binding
}

// ShortHelp implements the KeyMap interface.
func (km KeyMap) ShortHelp() []key.Binding {
	return []key.Binding{km.LineUp, km.LineDown}
}

// FullHelp implements the KeyMap interface.
func (km KeyMap) FullHelp() [][]key.Binding {
	return [][]key.Binding{
		{km.LineUp, km.LineDown, km.GotoTop, km.GotoBottom},
		{km.PageUp, km.PageDown, km.HalfPageUp, km.HalfPageDown},
	}
}

// DefaultKeyMap returns a default set of keybindings.
func DefaultKeyMap() KeyMap {
	const spacebar = " "
	return KeyMap{
		LineUp: key.NewBinding(
			key.WithKeys("up", "k"),
			key.WithHelp("↑/k", "up"),
		),
		LineDown: key.NewBinding(
			key.WithKeys("down", "j"),
			key.WithHelp("↓/j", "down"),
		),
		PageUp: key.NewBinding(
			key.WithKeys("b", "pgup"),
			key.WithHelp("b/pgup", "page up"),
		),
		PageDown: key.NewBinding(
			key.WithKeys("f", "pgdown", spacebar),
			key.WithHelp("f/pgdn", "page down"),
		),
		HalfPageUp: key.NewBinding(
			key.WithKeys("u", "ctrl+u"),
			key.WithHelp("u", "½ page up"),
		),
		HalfPageDown: key.NewBinding(
			key.WithKeys("d", "ctrl+d"),
			key.WithHelp("d", "½ page down"),
		),
		GotoTop: key.NewBinding(
			key.WithKeys("home", "g"),
			key.WithHelp("g/home", "go to start"),
		),
		GotoBottom: key.NewBinding(
			key.WithKeys("end", "G"),
			key.WithHelp("G/end", "go to end"),
		),
	}
}

// Styles contains style definitions for this list component. By default, these
// values are generated by DefaultStyles.
type Styles struct {
	Header   lipgloss.Style
	Cell     lipgloss.Style
	Selected lipgloss.Style
}

// DefaultStyles returns a set of default style definitions for this table.
func DefaultStyles() Styles {
	return Styles{
		Selected: lipgloss.NewStyle().Bold(true).Foreground(lipgloss.Color("212")),
		Header:   lipgloss.NewStyle().Bold(true),
		Cell:     lipgloss.NewStyle(),
	}
}

// SetStyles sets the table styles.
func (m *Model) SetStyles(s Styles) {
	m.styles = s
	m.UpdateViewport()
}

// Option is used to set options in New. For example:
//
//	table := New(WithColumns([]Column{{Title: "ID", Width: 10}}))
type Option func(*Model)

// New creates a new model for the table widget.
func New(opts ...Option) Model {
	m := Model{
        cursor: Cursor {x: 0, y: 0},
		Viewport: viewport.New(0, 20),

		KeyMap: DefaultKeyMap(),
		Help:   help.New(),
		styles: DefaultStyles(),
	}

	for _, opt := range opts {
		opt(&m)
	}

	m.UpdateViewport()

	return m
}

// WithColumns sets the table columns (headers).
func WithColumns(cols []Column) Option {
	return func(m *Model) {
		m.cols = cols
	}
}

// WithRows sets the table rows (data).
func WithRows(rows []Row) Option {
	return func(m *Model) {
		m.rows = rows
	}
}

// WithHeight sets the height of the table.
func WithHeight(h int) Option {
	return func(m *Model) {
		m.Viewport.Height = h - lipgloss.Height(m.headersView())
	}
}

// WithWidth sets the width of the table.
func WithWidth(w int) Option {
	return func(m *Model) {
		m.Viewport.Width = w
	}
}

// WithFocused sets the focus state of the table.
func WithFocused(f bool) Option {
	return func(m *Model) {
		m.focus = f
	}
}

// WithStyles sets the table styles.
func WithStyles(s Styles) Option {
	return func(m *Model) {
		m.styles = s
	}
}

// WithKeyMap sets the key map.
func WithKeyMap(km KeyMap) Option {
	return func(m *Model) {
		m.KeyMap = km
	}
}

// Update is the Bubble Tea update loop.
func (m Model) Update(msg tea.Msg) (Model, tea.Cmd) {
	if !m.focus {
		return m, nil
	}

	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch {
		case key.Matches(msg, m.KeyMap.LineUp):
			m.MoveUp(1)
		case key.Matches(msg, m.KeyMap.LineDown):
			m.MoveDown(1)
		case key.Matches(msg, m.KeyMap.PageUp):
			m.MoveUp(m.Viewport.Height)
		case key.Matches(msg, m.KeyMap.PageDown):
			m.MoveDown(m.Viewport.Height)
		case key.Matches(msg, m.KeyMap.HalfPageUp):
			m.MoveUp(m.Viewport.Height / 2)
		case key.Matches(msg, m.KeyMap.HalfPageDown):
			m.MoveDown(m.Viewport.Height / 2)
		case key.Matches(msg, m.KeyMap.LineDown):
			m.MoveDown(1)
		case key.Matches(msg, m.KeyMap.GotoTop):
			m.GotoTop()
		case key.Matches(msg, m.KeyMap.GotoBottom):
			m.GotoBottom()
		}
	}

	return m, nil
}

// Focused returns the focus state of the table.
func (m Model) Focused() bool {
	return m.focus
}

// Focus focuses the table, allowing the user to move around the rows and
// interact.
func (m *Model) Focus() {
	m.focus = true
	m.UpdateViewport()
}

// Blur blurs the table, preventing selection or movement.
func (m *Model) Blur() {
	m.focus = false
	m.UpdateViewport()
}

// View renders the component.
func (m Model) View() string {
	return m.headersView() + "\n" + m.Viewport.View()
}

// HelpView is a helper method for rendering the help menu from the keymap.
// Note that this view is not rendered by default and you must call it
// manually in your application, where applicable.
func (m Model) HelpView() string {
	return m.Help.View(m.KeyMap)
}

// UpdateViewport updates the list content based on the previously defined
// columns and rows.
func (m *Model) UpdateViewport() {
	renderedRows := make([]string, 0, len(m.rows))

    y := m.cursor.y
    viewportHeight := m.Viewport.Height / 2

	// Render only rows from: m.cursor-m.viewport.Height to: m.cursor+m.viewport.Height
	// Constant runtime, independent of number of rows in a table.
	// Limits the number of renderedRows to a maximum of 2*m.viewport.Height
	if m.cursor.y >= 0 {
		m.Start = clamp(y-viewportHeight, 0, y)
	} else {
		m.Start = 0
	}

	m.End = clamp(y+viewportHeight, y, len(m.rows))

	for i := m.Start; i < m.End; i++ {
		renderedRows = append(renderedRows, m.renderRow(i))
	}
	m.Viewport.SetContent(
		lipgloss.JoinVertical(lipgloss.Left, renderedRows...),
	)
}

// SelectedRow returns the selected row.
// You can cast it to your own implementation.
func (m Model) SelectedRow() Row {
	if m.cursor.y < 0 || m.cursor.y >= len(m.rows) {
		return nil
	}

	return m.rows[m.cursor.y]
}

// Rows returns the current rows.
func (m Model) Rows() []Row {
	return m.rows
}

// Columns returns the current columns.
func (m Model) Columns() []Column {
	return m.cols
}

// SetRows sets a new rows state.
func (m *Model) SetRows(r []Row) {
	m.rows = r
	m.UpdateViewport()
}

// SetColumns sets a new columns state.
func (m *Model) SetColumns(c []Column) {
	m.cols = c
	m.UpdateViewport()
}

// SetWidth sets the width of the viewport of the table.
func (m *Model) SetWidth(w int) {
	m.Viewport.Width = w
	m.UpdateViewport()
}

// SetHeight sets the height of the viewport of the table.
func (m *Model) SetHeight(h int) {
	m.Viewport.Height = h - lipgloss.Height(m.headersView())
	m.UpdateViewport()
}

// Height returns the viewport height of the table.
func (m Model) Height() int {
	return m.Viewport.Height
}

// Width returns the viewport width of the table.
func (m Model) Width() int {
	return m.Viewport.Width
}

// Cursor returns the index of the selected row.
func (m Model) Cursor() int {
    return m.cursor.y // TODO: return Cursor
}

// SetCursor sets the cursor position in the table.
func (m *Model) SetCursor(n int) {
	m.cursor.y = clamp(n, 0, len(m.rows)-1)
	m.UpdateViewport()
}

// MoveUp moves the selection up by any number of rows.
// It can not go above the first row.
func (m *Model) MoveUp(n int) {
	m.cursor.y = clamp(m.cursor.y-n, 0, len(m.rows)-1)
	switch {
	//case m.Start == 0:
	//	m.Viewport.SetYOffset(clamp(m.Viewport.YOffset, 0, m.cursor.y))
	//
	//case m.Start < m.Viewport.Height:
	//	m.Viewport.YOffset = (clamp(clamp(m.Viewport.YOffset+n, 0, m.cursor.y), 0, m.Viewport.Height))
	//
	//case m.Viewport.YOffset >= 1:
	//	m.Viewport.YOffset = clamp(m.Viewport.YOffset+n, 1, m.Viewport.Height)

	case m.Start == 0:
		m.Viewport.SetYOffset(clamp(m.Viewport.YOffset, 0, m.cursor.y * 2))

	case m.Start < m.Viewport.Height / 2:
		m.Viewport.YOffset = clamp(clamp(m.Viewport.YOffset+n * 2, 0, m.cursor.y * 2), 0, m.Viewport.Height)

	case m.Viewport.YOffset >= 1:
		m.Viewport.YOffset = clamp(m.Viewport.YOffset+n * 2, 2, m.Viewport.Height)
	}
	m.UpdateViewport()
}



// MoveDown moves the selection down by any number of rows.
// It can not go below the last row.
func (m *Model) MoveDown(n int) {
	m.cursor.y = clamp(m.cursor.y+n, 0, len(m.rows)-1)
	m.UpdateViewport()

	switch {
	//case m.End == len(m.rows) && m.Viewport.YOffset > 0:
	//	m.Viewport.SetYOffset(clamp(m.Viewport.YOffset-n, 1, m.Viewport.Height))
	//
	//case m.cursor.y > (m.End-m.Start)/2 && m.Viewport.YOffset > 0:
	//	m.Viewport.SetYOffset(clamp(m.Viewport.YOffset-n, 1, m.cursor.y))
	//
	//case m.Viewport.YOffset > 1:
	//case m.cursor.y > m.Viewport.YOffset+m.Viewport.Height-1:
	//	m.Viewport.SetYOffset(clamp(m.Viewport.YOffset+1, 0, 1))


	case m.End == len(m.rows) && m.Viewport.YOffset > 0:
		m.Viewport.SetYOffset(clamp(m.Viewport.YOffset-n * 2, 2, m.Viewport.Height))

	case m.cursor.y > (m.End-m.Start)/2 && m.Viewport.YOffset > 0:
		m.Viewport.SetYOffset(clamp(m.Viewport.YOffset-n * 2, 2, m.cursor.y * 2))

	case m.Viewport.YOffset > 2:
	case m.cursor.y > m.Viewport.YOffset+(m.Viewport.Height / 2)-1:
		m.Viewport.SetYOffset(clamp(m.Viewport.YOffset+2, 0, 2))
	}
}

// GotoTop moves the selection to the first row.
func (m *Model) GotoTop() {
	m.MoveUp(m.cursor.y)
}

// GotoBottom moves the selection to the last row.
func (m *Model) GotoBottom() {
	m.MoveDown(len(m.rows))
}

// FromValues create the table rows from a simple string. It uses `\n` by
// default for getting all the rows and the given separator for the fields on
// each row.
func (m *Model) FromValues(value, separator string) {
	rows := []Row{}
	for _, line := range strings.Split(value, "\n") {
		r := Row{}
		for _, field := range strings.Split(line, separator) {
			r = append(r, field)
		}
		rows = append(rows, r)
	}

	m.SetRows(rows)
}

func (m Model) headersView() string {
	s := make([]string, 0, len(m.cols))
	for i, col := range m.cols {
		if col.Width <= 0 {
			continue
		}

        disable_right := i == len(m.cols) - 1

		style := lipgloss.NewStyle().
        Border(lipgloss.Border{
            Top:    "─",
            Left:   "│",
            Right:  "|",
            Bottom: "",
            TopLeft: "┼",
        }). 
        BorderBottom(false).
        BorderRight(disable_right).
        BorderForeground(lipgloss.Color("240")).
        Width(col.Width)


		renderedCell := style.Render(runewidth.Truncate(col.Title, col.Width, "…"))
		s = append(s, m.styles.Header.Render(renderedCell))
	}
	return lipgloss.JoinHorizontal(lipgloss.Top, s...)
}

func (m *Model) renderRow(r int) string {
	s := make([]string, 0, len(m.cols))
	for i, value := range m.rows[r] {
		if m.cols[i].Width <= 0 {
			continue
		}

        disable_right := i == len(m.cols) - 1

		style := lipgloss.NewStyle().
            Border(lipgloss.Border{
                Top:    "─",
                Left:   "│",
                Right:  "|",
                Bottom: "",
                TopLeft: "┼",
            }). 
            BorderBottom(false).
            BorderRight(disable_right).
            BorderForeground(lipgloss.Color("240")).
            Width(m.cols[i].Width)

        if m.cursor.x + 1 == i && m.cursor.y != r {
            style = style.Background(m.styles.Selected.GetBackground())
        } else if m.cursor.x + 1 == i && m.cursor.y == r {
            style = style.Background(m.styles.Selected.GetBackground())
        } else if m.cursor.x + 1 != i && m.cursor.y == r {
            style = style.Background(m.styles.Selected.GetBackground())
        }

        //style := lipgloss.NewStyle().Width(m.cols[i].Width).MaxWidth(m.cols[i].Width).Inline(true)
		renderedCell := m.styles.Cell.Render(style.Render(runewidth.Truncate(value, m.cols[i].Width, "…")))
		s = append(s, renderedCell)
	}

	row := lipgloss.JoinHorizontal(lipgloss.Top, s...)

    //if r == m.cursor.y {
    //    return m.styles.Selected.Render(row)
    //}

	return row
}

func max(a, b int) int {
	if a > b {
		return a
	}

	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}

	return b
}

func clamp(v, low, high int) int {
	return min(max(v, low), high)
}
